type Job @SQL {
  id: Int! @SQL_PRIMARY @SQL_GORM(value: "autoIncrement")
  createdAt: Time!
  updatedAt: Time!
  deletedAt: SoftDelete #activate softdelete
  title: String!
  industry: String
  description: String!
  level: String
  location: String
  deadline: Time
  educationLevel: String
  experience: Int
  minSalary: Int
  maxSalary: Int
  requirements: String
  employerID: Int
  jobUrl: String
}

type UnapprovedJob @SQL {
  id: Int! @SQL_PRIMARY @SQL_GORM(value: "autoIncrement")
  createdAt: Time!
  updatedAt: Time!
  deletedAt: SoftDelete #activate softdelete
  title: String!
  industry: String
  description: String!
  level: String
  location: String
  deadline: Time
  educationLevel: String
  experience: Int
  minSalary: Int
  maxSalary: Int
  requirements: String
  employerID: Int
  jobUrl: String
}

type JobProfile {
  id: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: SoftDelete #activate softdelete
  title: String!
  industry: String
  description: String!
  level: String
  location: String
  deadline: Time
  educationLevel: String
  experience: Int
  minSalary: Int
  maxSalary: Int
  requirements: [String!]
  jobUrl: String
  employer: EmployerProfile
}

type UnapprovedJobProfile {
  id: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: SoftDelete #activate softdelete
  title: String!
  industry: String
  description: String!
  level: String
  location: String
  deadline: Time
  educationLevel: String
  experience: Int
  minSalary: Int
  maxSalary: Int
  requirements: [String!]
  jobUrl: String
  employer: EmployerProfile
}

input NewJob {
  title: String!
  description: String!
  industry: String
  level: String
  location: String
  deadline: Time
  educationLevel: String
  experience: Int
  minSalary: Int
  maxSalary: Int
  requirements: [String!]
  jobUrl: String
}

input JobsFilterParameters {
  educationLevel: String
  industry: String
  experience: Int
}

extend type Query {
  getJobs(filterparameters: JobsFilterParameters): [JobProfile!]
  findJob(id: Int!): JobProfile!
  getUnapprovedJobs(filterparameters: JobsFilterParameters): [UnapprovedJobProfile!]
  findUnapprovedJob(id: Int!): UnapprovedJobProfile!
}

extend type Mutation {
  createJob(input: NewJob!): JobProfile!
  createUnapprovedJob(input: NewJob!): UnapprovedJobProfile!
  approveJob(id: Int!): JobProfile!
  editJob(id: Int!, input: NewJob!): JobProfile!
  removeJob(id: Int!): JobProfile!
  removeUnapprovedJob(id: Int!): UnapprovedJobProfile!
}
