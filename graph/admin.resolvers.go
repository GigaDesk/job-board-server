package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/GigaDesk/eardrum-prefix/validate"
	"github.com/GigaDesk/eardrum-server/auth"
	"github.com/GigaDesk/eardrum-server/encrypt"
	"github.com/GigaDesk/eardrum-server/graph/model"
	"github.com/GigaDesk/eardrum-server/phoneutils"
	"github.com/GigaDesk/eardrum-server/pkg/jwt"
	"github.com/GigaDesk/eardrum-server/shutdown"
	"github.com/rs/zerolog/log"
)

// CreateAdmin is the resolver for the createAdmin field.
func (r *mutationResolver) CreateAdmin(ctx context.Context, input model.NewAdmin) (*model.UnverifiedAdmin, error) {
	//check if system is in shutdown mode
	if *shutdown.IsShutdown {
		return nil, errors.New("System is shut down for maintainance. We are sorry for any incoveniences caused")
	}
	//validate inputs
	if err := input.Validate(); err != nil {
		return nil, err
	}
	//check if the phone number exists in the database
	phoneexists, err := phoneutils.CheckAdminPhoneNumber(r.Sql.Db, input.PhoneNumber)

	//return any error that might be associated with checking the phone number's existence in the database
	if err != nil {
		log.Error().Str("phone_number", input.PhoneNumber).Str("path", "CreateAdmin").Msg(err.Error())
		return nil, errors.New("error checking phone number's existence")
	}
	//return an error if phone number exists in the database
	if phoneexists.Verified == true || phoneexists.Unverified == true {
		return nil, errors.New("phone number already exists")
	}

	//encrypt input password
	encryptedpassword, err := encrypt.HashPassword(input.Password)
	if err != nil {
		log.Error().Str("password", input.Password).Str("path", "CreateAdmin").Msg(err.Error())
		return nil, err
	}
	//create an unverified school data
	unverifiedadmin := &model.UnverifiedAdmin{
		Name:        input.Name,
		PhoneNumber: input.PhoneNumber,
		Password:    encryptedpassword,
	}
	//send an OTP code to the phone number associated with the unverified admin record, return error if there is any
	if err := phoneutils.SendOtp(unverifiedadmin.PhoneNumber); err != nil {
		log.Error().Str("phone_number", input.PhoneNumber).Str("path", "CreateAdmin").Msg(err.Error())
		return nil, err
	}
	//create an unverified admin record in the database and return if operation succeeds
	if err := r.Sql.Db.Create(unverifiedadmin).Error; err != nil {
		log.Error().Str("name", input.Name).Str("path", "CreateAdmin").Msg(err.Error())
		return nil, errors.New("an unexpected error occurred while creating the admin account. please try again later or contact support")
	}

	return unverifiedadmin, nil
}

// VerifyAdmin is the resolver for the verifyAdmin field.
func (r *mutationResolver) VerifyAdmin(ctx context.Context, input model.Verificationinfo) (*model.Admin, error) {
	//check if system is in shutdown mode
	if *shutdown.IsShutdown {
		return nil, errors.New("System is shut down for maintainance. We are sorry for any incoveniences caused")
	}
	//validate inputs
	if err := input.Validate(); err != nil {
		return nil, err
	}
	//Check the validity of an OTP code
	if err := phoneutils.CheckOtp(input.PhoneNumber, input.Otp); err != nil {
		return nil, err
	}
	//declare an unverifiedadmin variable
	var unverifiedadmin *model.UnverifiedAdmin

	// Find the first unverified admin that matches the input phone number from the unverified admin table
	if err := r.Sql.Db.Where("phone_number = ?", input.PhoneNumber).First(&unverifiedadmin).Error; err != nil {
		log.Info().Str("phone_number", input.PhoneNumber).Str("path", "VerifyAdmin").Msg("phone number does not exist")
		return nil, errors.New("error finding unverified admin with phone number: " + input.PhoneNumber)
	}

	// transform the unverified admin model into admin model and copy it
	admin := &model.Admin{
		Name:        unverifiedadmin.Name,
		PhoneNumber: unverifiedadmin.PhoneNumber,
		Password:    unverifiedadmin.Password,
	}

	// take the newly transformed and copied admin data and transfer it into the official verified admin table
	if err := r.Sql.Db.Create(admin).Error; err != nil {
		log.Info().Str("name", admin.Name).Str("path", "VerifyAdmin").Msg(err.Error())
		return nil, errors.New("Failed to verify admin account. please try again later or contact support")
	}

	// delete the unverified admin from the unverified admin table
	if err := r.Sql.Db.Delete(unverifiedadmin).Error; err != nil {
		log.Error().Str("path", "VerifyAdmin").Int("record_id", unverifiedadmin.ID).Msg(err.Error())
		return nil, errors.New("Failed to complete admin account verification. please try again later or contact support")
	}

	log.Info().Int("initial_record_id", unverifiedadmin.ID).Int("final_record_id", admin.ID).Str("path", "VerifyAdmin").Msg("completed unverified admin to admin data transaction")
	return admin, nil
}

// AdminLogin is the resolver for the adminLogin field.
func (r *mutationResolver) AdminLogin(ctx context.Context, input model.AdminLogin) (*string, error) {
	//check if system is in shutdown mode
	if *shutdown.IsShutdown {
		return nil, errors.New("System is shut down for maintainance. We are sorry for any incoveniences caused")
	}

	//validate AdminLogin input
	if err := input.Validate(); err != nil {
		return nil, err
	}

	//declare an admin variable
	var admin *model.Admin
	// Find the first admin that matches the input phone number from the admin table

	if err := r.Sql.Db.Where("phone_number = ?", input.PhoneNumber).First(&admin).Error; err != nil {
		log.Info().Str("phone_number", input.PhoneNumber).Str("path", "AdminLogin").Msg(err.Error())
		return nil, errors.New("phone number does not exist")
	}
	//check if the password of the admin matches the input password
	if err := encrypt.CheckPassword(admin.Password, input.Password); err != nil {
		log.Info().Str("path", "AdminLogin").Msg(err.Error())
		return nil, errors.New("Invalid phone number or password")
	}

	credentials := jwt.TokenCredentials{
		Id:   strconv.Itoa(admin.ID),
		Role: "admin",
	}
	token, err := jwt.GenerateToken(credentials)
	if err != nil {
		log.Error().Str("id", credentials.Id).Str("role", credentials.Role).Str("path", "AdminLogin").Msg(err.Error())
		return nil, errors.New("error generating accessToken")
	}
	log.Info().Str("id", credentials.Id).Str("role", credentials.Role).Str("path", "AdminLogin").Msg("admin logged in successfully!")
	return &token, nil
}

// ForgotAdminPassword is the resolver for the forgotAdminPassword field.
func (r *mutationResolver) ForgotAdminPassword(ctx context.Context, phoneNumber string) (*model.SendCodeStatus, error) {
	//check if system is in shutdown mode
	if *shutdown.IsShutdown {
		return nil, errors.New("System is shut down for maintainance. We are sorry for any incoveniences caused")
	}

	//validate phone number
	if err := validate.ValidateKenyanPhoneNumber(phoneNumber); err != nil {
		return nil, err
	}

	//check if the phone number exists in the database
	phoneexists, err := phoneutils.CheckAdminPhoneNumber(r.Sql.Db, phoneNumber)

	//return any error that might be associated with checking the phone number's existence in the database
	if err != nil {
		log.Error().Str("phone_number", phoneNumber).Str("path", "ForgotAdminPassword").Msg(err.Error())
		return nil, err
	}
	//return an error if phone number exists in the unverified admin table
	if phoneexists.Verified != true && phoneexists.Unverified == true {
		return nil, errors.New("phone number has been registered but is yet to be verified")
	}
	//return an error if phone number is neither registered nor verified
	if phoneexists.Verified != true && phoneexists.Unverified != true {
		return nil, errors.New("phone number does not exist")
	}
	//send an OTP code to the phone number provided, return error if there is any
	if err := phoneutils.SendOtp(phoneNumber); err != nil {
		log.Error().Str("phone_number", phoneNumber).Str("path", "ForgotAdminPassword").Msg(err.Error())
		return nil, err
	}
	//return status on success
	sendcodestatus := &model.SendCodeStatus{
		PhoneNumber: phoneNumber,
		Success:     true,
	}
	return sendcodestatus, nil
}

// RequestAdminPasswordReset is the resolver for the requestAdminPasswordReset field.
func (r *mutationResolver) RequestAdminPasswordReset(ctx context.Context, input *model.Verificationinfo) (*string, error) {
	//check if system is in shutdown mode
	if *shutdown.IsShutdown {
		return nil, errors.New("System is shut down for maintainance. We are sorry for any incoveniences caused")
	}
	//validate inputs
	if err := input.Validate(); err != nil {
		return nil, err
	}

	//Check the validity of an OTP code
	if err := phoneutils.CheckOtp(input.PhoneNumber, input.Otp); err != nil {
		return nil, err
	}
	//declare an admin variable
	var admin *model.School

	// Find the first admin that matches the input phone number from the admin table

	if err := r.Sql.Db.Where("phone_number = ?", input.PhoneNumber).First(&admin).Error; err != nil {
		log.Info().Str("phone_number", input.PhoneNumber).Str("path", "RequestAdminPasswordReset").Msg(err.Error())
		return nil, errors.New("phone number does not exist")
	}

	credentials := jwt.TokenCredentials{
		Id:   strconv.Itoa(admin.ID),
		Role: "admin",
	}
	token, err := jwt.GenerateToken(credentials)
	if err != nil {
		log.Error().Str("id", credentials.Id).Str("role", credentials.Role).Str("path", "RequestAdminPasswordReset").Msg(err.Error())
		return nil, errors.New("error generating accessToken")
	}
	return &token, nil
}

// ResetAdminPassword is the resolver for the resetAdminPassword field.
func (r *mutationResolver) ResetAdminPassword(ctx context.Context, newPassword string) (*model.Admin, error) {
	//check if system is in shutdown mode
	if *shutdown.IsShutdown {
		return nil, errors.New("System is shut down for maintainance. We are sorry for any incoveniences caused")
	}
	user, err := auth.ForContext(ctx)
	if err != nil {
		return nil, err
	}
	if user == nil {
		return nil, errors.New("access to ResetAdminPassword denied!")
	}
	role := user.GetRole()
	if role != "admin" {
		return nil, errors.New("access to ResetAdminPassword denied. Only available for registered and logged in admin. To fix check access token!")
	}
	id, err := user.GetID()

	if err != nil {
		errors.New("could not access admin's id!")
	}

	//validate inputs
	if err := validate.ValidatePassword(newPassword); err != nil {
		return nil, err
	}

	var admin *model.Admin
	//fetch the record to be updated from the database
	if err := r.Sql.Db.First(&admin, id).Error; err != nil {
		log.Error().Int("id", id).Str("path", "ResetAdminPassword").Msg(err.Error())
		return nil, err
	}
	//encrypt input password
	encryptedpassword, err := encrypt.HashPassword(newPassword)
	if err != nil {
		log.Error().Str("password", newPassword).Str("path", "ResetAdminPassword").Msg(err.Error())
		return nil, err
	}
	// Update the records' attributes with `map`
	if err := r.Sql.Db.Model(&admin).Updates(map[string]interface{}{"password": encryptedpassword}).Error; err != nil {
		log.Error().Int("id", admin.ID).Str("path", "ResetAdminPassword").Msg(fmt.Sprintf("updating admin password failed: %s", err.Error()))
		return nil, err
	}

	//fetch the record again from the database, this time the updated version
	if err := r.Sql.Db.First(&admin, id).Error; err != nil {
		log.Error().Int("id", id).Str("path", "ResetSchoolPassword").Msg(err.Error())
		return nil, err
	}

	//return the updated record
	return admin, nil
}

// AdminPhoneNumberExists is the resolver for the adminPhoneNumberExists field.
func (r *queryResolver) AdminPhoneNumberExists(ctx context.Context, phoneNumber string) (*model.PhoneNumberExists, error) {
	//check if system is in shutdown mode
	if *shutdown.IsShutdown {
		return nil, errors.New("System is shut down for maintainance. We are sorry for any incoveniences caused")
	}
	phoneexists, err := phoneutils.CheckAdminPhoneNumber(r.Sql.Db, phoneNumber)

	if err != nil {
		log.Error().Str("phone_number", phoneNumber).Str("path", "AdminPhoneNumberExists").Msg(err.Error())
		return nil, err
	}

	return phoneexists, nil
}

// GetadminProfile is the resolver for the getadminProfile field.
func (r *queryResolver) GetadminProfile(ctx context.Context) (*model.SchoolProfile, error) {
	panic(fmt.Errorf("not implemented: GetadminProfile - getadminProfile"))
}
