// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"time"

	"github.com/mitchellh/mapstructure"
)

// GetInputStruct returns struct filled from map obj defined by name
// Example useage struct validation with github.com/go-playground/validator by directive:
//
//	func ValidateDirective(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error) {
//	  field := graphql.GetPathContext(ctx)
//	  if data, ok := obj.(map[string]interface{}); ok {
//	    for _, v := range field.ParentField.Field.Arguments {
//	      name := v.Value.ExpectedType.Name()
//	      model, err := model.GetInputStruct(name, data)
//	      if err != nil {
//	        //handle not found error
//	      }
//	      if err := validate.Struct(model); err != nil {
//	      //handle error
//	      }
//	    }
//	  }
//	  return next(ctx)
//	}
func GetInputStruct(name string, obj map[string]interface{}) (interface{}, error) {
	switch name {
	case "AdminInput":
		return AdminInputFromMap(obj)
	case "EmployeeInput":
		return EmployeeInputFromMap(obj)
	case "EmployerInput":
		return EmployerInputFromMap(obj)
	case "JobInput":
		return JobInputFromMap(obj)
	case "UnapprovedJobInput":
		return UnapprovedJobInputFromMap(obj)
	case "UnverifiedAdminInput":
		return UnverifiedAdminInputFromMap(obj)
	case "UnverifiedEmployeeInput":
		return UnverifiedEmployeeInputFromMap(obj)
	case "UnverifiedEmployerInput":
		return UnverifiedEmployerInputFromMap(obj)
	}
	return nil, fmt.Errorf("%s not found", name)
}

// AdminInputFromMap return a AdminInput from data map
// use github.com/mitchellh/mapstructure with reflaction
func AdminInputFromMap(data map[string]interface{}) (AdminInput, error) {
	model := AdminInput{}
	err := mapstructure.Decode(data, &model)
	return model, err
}

// MergeToType returns a map with all values set to AdminPatch
func (d *AdminPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})
	if d.Name != nil {
		res["name"] = *d.Name
	}
	if d.PhoneNumber != nil {
		res["phone_number"] = *d.PhoneNumber
	}
	if d.Password != nil {
		res["password"] = *d.Password
	}
	return res
}

// MergeToType retuns a Admin filled from AdminInput
func (d *AdminInput) MergeToType() Admin {

	tmpName := d.Name

	tmpPhoneNumber := d.PhoneNumber

	tmpPassword := d.Password
	return Admin{
		Name:        tmpName,
		PhoneNumber: tmpPhoneNumber,
		Password:    tmpPassword,
	}
}

// EmployeeInputFromMap return a EmployeeInput from data map
// use github.com/mitchellh/mapstructure with reflaction
func EmployeeInputFromMap(data map[string]interface{}) (EmployeeInput, error) {
	model := EmployeeInput{}
	err := mapstructure.Decode(data, &model)
	return model, err
}

// MergeToType returns a map with all values set to EmployeePatch
func (d *EmployeePatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})
	if d.Name != nil {
		res["name"] = *d.Name
	}
	if d.PhoneNumber != nil {
		res["phone_number"] = *d.PhoneNumber
	}
	if d.Password != nil {
		res["password"] = *d.Password
	}
	if d.Profilepicture != nil {
		res["profilepicture"] = d.Profilepicture
	}
	return res
}

// MergeToType retuns a Employee filled from EmployeeInput
func (d *EmployeeInput) MergeToType() Employee {

	tmpName := d.Name

	tmpPhoneNumber := d.PhoneNumber

	tmpPassword := d.Password

	var tmpProfilepicture *string
	if d.Profilepicture != nil {
		tmpProfilepicture = d.Profilepicture
	}
	return Employee{
		Name:           tmpName,
		PhoneNumber:    tmpPhoneNumber,
		Password:       tmpPassword,
		Profilepicture: tmpProfilepicture,
	}
}

// EmployerInputFromMap return a EmployerInput from data map
// use github.com/mitchellh/mapstructure with reflaction
func EmployerInputFromMap(data map[string]interface{}) (EmployerInput, error) {
	model := EmployerInput{}
	err := mapstructure.Decode(data, &model)
	return model, err
}

// MergeToType returns a map with all values set to EmployerPatch
func (d *EmployerPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})
	if d.Name != nil {
		res["name"] = *d.Name
	}
	if d.PhoneNumber != nil {
		res["phone_number"] = *d.PhoneNumber
	}
	if d.Password != nil {
		res["password"] = *d.Password
	}
	if d.Badge != nil {
		res["badge"] = d.Badge
	}
	if d.Website != nil {
		res["website"] = d.Website
	}
	return res
}

// MergeToType retuns a Employer filled from EmployerInput
func (d *EmployerInput) MergeToType() Employer {

	tmpName := d.Name

	tmpPhoneNumber := d.PhoneNumber

	tmpPassword := d.Password

	var tmpBadge *string
	if d.Badge != nil {
		tmpBadge = d.Badge
	}

	var tmpWebsite *string
	if d.Website != nil {
		tmpWebsite = d.Website
	}
	return Employer{
		Name:        tmpName,
		PhoneNumber: tmpPhoneNumber,
		Password:    tmpPassword,
		Badge:       tmpBadge,
		Website:     tmpWebsite,
	}
}

// JobInputFromMap return a JobInput from data map
// use github.com/mitchellh/mapstructure with reflaction
func JobInputFromMap(data map[string]interface{}) (JobInput, error) {
	model := JobInput{}
	err := mapstructure.Decode(data, &model)
	return model, err
}

// MergeToType returns a map with all values set to JobPatch
func (d *JobPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})
	if d.Title != nil {
		res["title"] = *d.Title
	}
	if d.Industry != nil {
		res["industry"] = d.Industry
	}
	if d.Description != nil {
		res["description"] = *d.Description
	}
	if d.Level != nil {
		res["level"] = d.Level
	}
	if d.Location != nil {
		res["location"] = d.Location
	}
	if d.Deadline != nil {
		res["deadline"] = d.Deadline
	}
	if d.EducationLevel != nil {
		res["education_level"] = d.EducationLevel
	}
	if d.Experience != nil {
		res["experience"] = d.Experience
	}
	if d.MinSalary != nil {
		res["min_salary"] = d.MinSalary
	}
	if d.MaxSalary != nil {
		res["max_salary"] = d.MaxSalary
	}
	if d.Requirements != nil {
		res["requirements"] = d.Requirements
	}
	if d.EmployerID != nil {
		res["employer_id"] = d.EmployerID
	}
	if d.JobURL != nil {
		res["job_url"] = d.JobURL
	}
	return res
}

// MergeToType retuns a Job filled from JobInput
func (d *JobInput) MergeToType() Job {

	tmpTitle := d.Title

	var tmpIndustry *string
	if d.Industry != nil {
		tmpIndustry = d.Industry
	}

	tmpDescription := d.Description

	var tmpLevel *string
	if d.Level != nil {
		tmpLevel = d.Level
	}

	var tmpLocation *string
	if d.Location != nil {
		tmpLocation = d.Location
	}

	var tmpDeadline *time.Time
	if d.Deadline != nil {
		tmpDeadline = d.Deadline
	}

	var tmpEducationLevel *string
	if d.EducationLevel != nil {
		tmpEducationLevel = d.EducationLevel
	}

	var tmpExperience *int
	if d.Experience != nil {
		tmpExperience = d.Experience
	}

	var tmpMinSalary *int
	if d.MinSalary != nil {
		tmpMinSalary = d.MinSalary
	}

	var tmpMaxSalary *int
	if d.MaxSalary != nil {
		tmpMaxSalary = d.MaxSalary
	}

	var tmpRequirements *string
	if d.Requirements != nil {
		tmpRequirements = d.Requirements
	}

	var tmpEmployerID *int
	if d.EmployerID != nil {
		tmpEmployerID = d.EmployerID
	}

	var tmpJobURL *string
	if d.JobURL != nil {
		tmpJobURL = d.JobURL
	}
	return Job{
		Title:          tmpTitle,
		Industry:       tmpIndustry,
		Description:    tmpDescription,
		Level:          tmpLevel,
		Location:       tmpLocation,
		Deadline:       tmpDeadline,
		EducationLevel: tmpEducationLevel,
		Experience:     tmpExperience,
		MinSalary:      tmpMinSalary,
		MaxSalary:      tmpMaxSalary,
		Requirements:   tmpRequirements,
		EmployerID:     tmpEmployerID,
		JobURL:         tmpJobURL,
	}
}

// UnapprovedJobInputFromMap return a UnapprovedJobInput from data map
// use github.com/mitchellh/mapstructure with reflaction
func UnapprovedJobInputFromMap(data map[string]interface{}) (UnapprovedJobInput, error) {
	model := UnapprovedJobInput{}
	err := mapstructure.Decode(data, &model)
	return model, err
}

// MergeToType returns a map with all values set to UnapprovedJobPatch
func (d *UnapprovedJobPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})
	if d.Title != nil {
		res["title"] = *d.Title
	}
	if d.Industry != nil {
		res["industry"] = d.Industry
	}
	if d.Description != nil {
		res["description"] = *d.Description
	}
	if d.Level != nil {
		res["level"] = d.Level
	}
	if d.Location != nil {
		res["location"] = d.Location
	}
	if d.Deadline != nil {
		res["deadline"] = d.Deadline
	}
	if d.EducationLevel != nil {
		res["education_level"] = d.EducationLevel
	}
	if d.Experience != nil {
		res["experience"] = d.Experience
	}
	if d.MinSalary != nil {
		res["min_salary"] = d.MinSalary
	}
	if d.MaxSalary != nil {
		res["max_salary"] = d.MaxSalary
	}
	if d.Requirements != nil {
		res["requirements"] = d.Requirements
	}
	if d.EmployerID != nil {
		res["employer_id"] = d.EmployerID
	}
	if d.JobURL != nil {
		res["job_url"] = d.JobURL
	}
	return res
}

// MergeToType retuns a UnapprovedJob filled from UnapprovedJobInput
func (d *UnapprovedJobInput) MergeToType() UnapprovedJob {

	tmpTitle := d.Title

	var tmpIndustry *string
	if d.Industry != nil {
		tmpIndustry = d.Industry
	}

	tmpDescription := d.Description

	var tmpLevel *string
	if d.Level != nil {
		tmpLevel = d.Level
	}

	var tmpLocation *string
	if d.Location != nil {
		tmpLocation = d.Location
	}

	var tmpDeadline *time.Time
	if d.Deadline != nil {
		tmpDeadline = d.Deadline
	}

	var tmpEducationLevel *string
	if d.EducationLevel != nil {
		tmpEducationLevel = d.EducationLevel
	}

	var tmpExperience *int
	if d.Experience != nil {
		tmpExperience = d.Experience
	}

	var tmpMinSalary *int
	if d.MinSalary != nil {
		tmpMinSalary = d.MinSalary
	}

	var tmpMaxSalary *int
	if d.MaxSalary != nil {
		tmpMaxSalary = d.MaxSalary
	}

	var tmpRequirements *string
	if d.Requirements != nil {
		tmpRequirements = d.Requirements
	}

	var tmpEmployerID *int
	if d.EmployerID != nil {
		tmpEmployerID = d.EmployerID
	}

	var tmpJobURL *string
	if d.JobURL != nil {
		tmpJobURL = d.JobURL
	}
	return UnapprovedJob{
		Title:          tmpTitle,
		Industry:       tmpIndustry,
		Description:    tmpDescription,
		Level:          tmpLevel,
		Location:       tmpLocation,
		Deadline:       tmpDeadline,
		EducationLevel: tmpEducationLevel,
		Experience:     tmpExperience,
		MinSalary:      tmpMinSalary,
		MaxSalary:      tmpMaxSalary,
		Requirements:   tmpRequirements,
		EmployerID:     tmpEmployerID,
		JobURL:         tmpJobURL,
	}
}

// UnverifiedAdminInputFromMap return a UnverifiedAdminInput from data map
// use github.com/mitchellh/mapstructure with reflaction
func UnverifiedAdminInputFromMap(data map[string]interface{}) (UnverifiedAdminInput, error) {
	model := UnverifiedAdminInput{}
	err := mapstructure.Decode(data, &model)
	return model, err
}

// MergeToType returns a map with all values set to UnverifiedAdminPatch
func (d *UnverifiedAdminPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})
	if d.Name != nil {
		res["name"] = *d.Name
	}
	if d.PhoneNumber != nil {
		res["phone_number"] = *d.PhoneNumber
	}
	if d.Password != nil {
		res["password"] = *d.Password
	}
	return res
}

// MergeToType retuns a UnverifiedAdmin filled from UnverifiedAdminInput
func (d *UnverifiedAdminInput) MergeToType() UnverifiedAdmin {

	tmpName := d.Name

	tmpPhoneNumber := d.PhoneNumber

	tmpPassword := d.Password
	return UnverifiedAdmin{
		Name:        tmpName,
		PhoneNumber: tmpPhoneNumber,
		Password:    tmpPassword,
	}
}

// UnverifiedEmployeeInputFromMap return a UnverifiedEmployeeInput from data map
// use github.com/mitchellh/mapstructure with reflaction
func UnverifiedEmployeeInputFromMap(data map[string]interface{}) (UnverifiedEmployeeInput, error) {
	model := UnverifiedEmployeeInput{}
	err := mapstructure.Decode(data, &model)
	return model, err
}

// MergeToType returns a map with all values set to UnverifiedEmployeePatch
func (d *UnverifiedEmployeePatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})
	if d.Name != nil {
		res["name"] = *d.Name
	}
	if d.PhoneNumber != nil {
		res["phone_number"] = *d.PhoneNumber
	}
	if d.Password != nil {
		res["password"] = *d.Password
	}
	if d.Profilepicture != nil {
		res["profilepicture"] = d.Profilepicture
	}
	return res
}

// MergeToType retuns a UnverifiedEmployee filled from UnverifiedEmployeeInput
func (d *UnverifiedEmployeeInput) MergeToType() UnverifiedEmployee {

	tmpName := d.Name

	tmpPhoneNumber := d.PhoneNumber

	tmpPassword := d.Password

	var tmpProfilepicture *string
	if d.Profilepicture != nil {
		tmpProfilepicture = d.Profilepicture
	}
	return UnverifiedEmployee{
		Name:           tmpName,
		PhoneNumber:    tmpPhoneNumber,
		Password:       tmpPassword,
		Profilepicture: tmpProfilepicture,
	}
}

// UnverifiedEmployerInputFromMap return a UnverifiedEmployerInput from data map
// use github.com/mitchellh/mapstructure with reflaction
func UnverifiedEmployerInputFromMap(data map[string]interface{}) (UnverifiedEmployerInput, error) {
	model := UnverifiedEmployerInput{}
	err := mapstructure.Decode(data, &model)
	return model, err
}

// MergeToType returns a map with all values set to UnverifiedEmployerPatch
func (d *UnverifiedEmployerPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})
	if d.Name != nil {
		res["name"] = *d.Name
	}
	if d.PhoneNumber != nil {
		res["phone_number"] = *d.PhoneNumber
	}
	if d.Password != nil {
		res["password"] = *d.Password
	}
	if d.Badge != nil {
		res["badge"] = d.Badge
	}
	if d.Website != nil {
		res["website"] = d.Website
	}
	return res
}

// MergeToType retuns a UnverifiedEmployer filled from UnverifiedEmployerInput
func (d *UnverifiedEmployerInput) MergeToType() UnverifiedEmployer {

	tmpName := d.Name

	tmpPhoneNumber := d.PhoneNumber

	tmpPassword := d.Password

	var tmpBadge *string
	if d.Badge != nil {
		tmpBadge = d.Badge
	}

	var tmpWebsite *string
	if d.Website != nil {
		tmpWebsite = d.Website
	}
	return UnverifiedEmployer{
		Name:        tmpName,
		PhoneNumber: tmpPhoneNumber,
		Password:    tmpPassword,
		Badge:       tmpBadge,
		Website:     tmpWebsite,
	}
}
