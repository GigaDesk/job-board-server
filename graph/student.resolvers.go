package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"log"

	"github.com/GigaDesk/eardrum-graph/neo4jschool"
	"github.com/GigaDesk/eardrum-graph/neo4jstudent"
	"github.com/GigaDesk/eardrum-server/auth"
	"github.com/GigaDesk/eardrum-server/encrypt"
	"github.com/GigaDesk/eardrum-server/graph/model"
	"github.com/GigaDesk/eardrum-server/wrappers"
)

// AddStudents is the resolver for the AddStudents field.
func (r *mutationResolver) AddStudents(ctx context.Context, students []*model.NewStudent) ([]*model.Student, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return nil, errors.New("access to add students denied!")
	}
	role := user.GetRole()
	if role != "school" {
		return nil, errors.New("access to add students denied. Only available for registered and logged in schools. To fix check access token!")
	}

	id, err := user.GetID()

	if err != nil {
		log.Println(err)
		errors.New("could not access school's id!")
	}

	log.Println("adding students for school id: ", id, "of role: ", role)

	var s []*model.Student
	for _, student := range students {
		n := &model.Student{
			RegistrationNumber: student.RegistrationNumber,
			Name:               student.Name,
			PhoneNumber:        student.PhoneNumber,
			DateOfAdmission:    student.DateOfAdmission,
			DateOfBirth:        student.DateOfBirth,
			ProfilePicture:     student.ProfilePicture,
		}
		//encrypt student password
		encryptedpassword, err := encrypt.HashPassword(student.Password)
		if err != nil {
			return nil, err
		}
		n.Password = encryptedpassword
		s = append(s, n)
	}
	//Create records in postgres
	if err := r.Sql.Db.Create(s).Error; err != nil {
		log.Println(err)
		return nil, errors.New("an unexpected error occurred while creating the school account. please try again later or contact support")
	}
	//Create records in neo4j
	result, err := neo4jschool.CheckSchool(r.Neo4j, id)
	if err != nil {
		log.Println(err)
		return nil, errors.New("a serious error occurred while adding students. please try again later or contact support")
	}
	if result == false {
		log.Println(err)
		return nil, errors.New("a serious synchronization error occurred while adding students. please try again later or contact support")
	}
	for _, student := range s {
		n := wrappers.Neo4jStudentWrapper{
			Student: student,
		}

		if err := neo4jstudent.CreateStudent(r.Neo4j, n, id); err != nil {
			log.Fatal(err)
			return nil, errors.New("a serious synchronization error occurred while adding: " + student.Name)
		}

	}
	return s, nil
}
