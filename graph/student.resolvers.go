package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"fmt"

	"github.com/GigaDesk/eardrum-graph/neo4jschool"
	"github.com/GigaDesk/eardrum-graph/neo4jstudent"
	"github.com/GigaDesk/eardrum-prefix/prefix"
	"github.com/GigaDesk/eardrum-server/auth"
	"github.com/GigaDesk/eardrum-server/encrypt"
	"github.com/GigaDesk/eardrum-server/graph/model"
	"github.com/GigaDesk/eardrum-server/shutdown"
	"github.com/GigaDesk/eardrum-server/wrappers"
	"github.com/rs/zerolog/log"
)

// AddStudents is the resolver for the AddStudents field.
func (r *mutationResolver) AddStudents(ctx context.Context, students []*model.NewStudent) ([]*model.Student, error) {
	//check if system is in shutdown mode
	if *shutdown.IsShutdown {
		return nil, errors.New("System is shut down for maintainance. We are sorry for any incoveniences caused")
	}
	user := auth.ForContext(ctx)
	if user == nil {
		return nil, errors.New("access to add students denied!")
	}
	role := user.GetRole()
	if role != "school" {
		return nil, errors.New("access to add students denied. Only available for registered and logged in schools. To fix check access token!")
	}

	id, err := user.GetID()

	if err != nil {
		errors.New("could not access school's id!")
	}

	log.Info().Str("role", role).Int("id", id).Str("path", "AddStudents").Msg("adding students")

	//a slice of students
	var s []*model.Student
	// a map of registration numbers to a boolean that shows if they already exist or not
	m := make(map[string]bool)
	//a slice of non repeated registration numbers
	var registration_numbers []string
	for _, student := range students {
		n := &model.Student{
			RegistrationNumber: prefix.PrefixWithId(student.RegistrationNumber, id),
			Name:               student.Name,
			PhoneNumber:        student.PhoneNumber,
			DateOfAdmission:    student.DateOfAdmission,
			DateOfBirth:        student.DateOfBirth,
			ProfilePicture:     student.ProfilePicture,
		}

		if m[n.RegistrationNumber] {
			log.Info().Str("registration_number", n.RegistrationNumber).Str("path", "AddStudents").Msg("student contain duplicate registration number")
			return nil, errors.New(fmt.Sprintf("student registration numbers %s is duplicated", n.RegistrationNumber))
		}
		m[n.RegistrationNumber] = true

		registration_numbers = append(registration_numbers, n.RegistrationNumber)

		//encrypt student password
		encryptedpassword, err := encrypt.HashPassword(student.Password)
		if err != nil {
			return nil, err
		}
		n.Password = encryptedpassword
		s = append(s, n)
	}
	//get students in the database with similar registration numbers
	var duplicated_students []model.Student
	r.Sql.Db.Where("registration_number IN ?", registration_numbers).Find(&duplicated_students)

	//check if there exists students in the database with similar registration numbers
	if len(duplicated_students) != 0 {
		log.Info().Str("registration_number", duplicated_students[0].RegistrationNumber).Str("path", "AddStudents").Msg("student with registration number already exists")
		return nil, errors.New(fmt.Sprintf("student with registration number %s already exists", duplicated_students[0].RegistrationNumber))
	}
	//Create records in postgres
	if err := r.Sql.Db.Create(s).Error; err != nil {
		log.Error().Str("first_record_name", s[0].Name).Str("path", "AddStudents").Msg(err.Error())
		return nil, errors.New("an unexpected error occurred while creating the school account. please try again later or contact support")
	}
	//Create records in neo4j
	result, err := neo4jschool.CheckSchool(r.Neo4j, id)
	if err != nil {
		go shutdown.InitiateShutdown(err, "AddStudents", id)
		return nil, errors.New("a serious error occurred while adding students. please try again later or contact support")
	}
	if result == false {
		go shutdown.InitiateShutdown(errors.New("school does not exist"), "AddStudents", id)
		return nil, errors.New("a serious synchronization error occurred while adding students. please try again later or contact support")
	}
	for _, student := range s {
		n := wrappers.Neo4jStudentWrapper{
			Student: student,
		}

		if err := neo4jstudent.CreateStudent(r.Neo4j, n, id); err != nil {
			go shutdown.InitiateShutdown(err, "AddStudents", n.ID)
			return nil, errors.New("a serious synchronization error occurred while adding: " + student.Name)
		}
		student.RegistrationNumber = prefix.DePrefixWithId(student.RegistrationNumber, id)
	}
	return s, nil
}
